{"version":3,"file":"main.ec1e5b0014006c4797f6.bundle.js","sources":["webpack:///./projects/components/dialog/bcDialog.service.ts"],"sourcesContent":["import { Injectable, TemplateRef } from '@angular/core';\n\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { ThemePalette } from '@angular/material/core';\nimport { ComponentType } from '@angular/cdk/portal';\n\nimport { AlertComponent } from './alert.component';\nimport { SelectComponent } from './select/select.component';\n\n//#region type and interface\ntype StringOrTemplateRef = string | TemplateRef<any>;\n\ntype AnyFunction = (...args: any[]) => any;\n\ninterface BcButton {\n  text: StringOrTemplateRef;\n  focus?: boolean;\n  dialogResult?: any; // 点击按钮关闭dialog时的返回值\n  closeOnClick?: boolean;\n  onClick?: AnyFunction;\n  color?: ThemePalette;\n}\n\nexport interface BcAlertData {\n  title?: StringOrTemplateRef;\n  message?: StringOrTemplateRef;\n  actions?: BcButton[];\n}\n\nexport interface BcSelectItem {\n  label: string | TemplateRef<any>;\n  value: any;\n  disabled?: boolean;\n  selected?: boolean;\n  checked?: boolean;\n}\n\nexport interface BcSelectData {\n  title?: StringOrTemplateRef;\n  message?: StringOrTemplateRef;\n  multi?: boolean;\n  items: BcSelectItem[];\n}\n//#endregion\n\n@Injectable()\nexport class BcDialogService {\n  constructor(private dialog: MatDialog) {}\n\n  alert(\n    title?: StringOrTemplateRef | null,\n    message?: StringOrTemplateRef | null,\n    actions?: BcButton[] | null,\n    dialogConfig?: MatDialogConfig\n  ) {\n    return this.open<AlertComponent, BcAlertData, any>(AlertComponent, {\n      ...dialogConfig,\n      role: 'alertdialog',\n      disableClose: true,\n      data: { title, message, actions: this.completeActions(actions) }\n    });\n  }\n\n  select(\n    multi = true,\n    title: StringOrTemplateRef | null = null,\n    message: StringOrTemplateRef | null = null,\n    items: BcSelectItem[],\n    dialogConfig?: MatDialogConfig\n  ) {\n    return this.open<SelectComponent, BcSelectData, BcSelectItem['value'] | BcSelectItem['value'][]>(SelectComponent, {\n      ...dialogConfig,\n      data: {\n        title,\n        message,\n        items,\n        multi\n      }\n    });\n  }\n\n  private open<T = any, D = any, R = any>(comp: ComponentType<T>, dialogConfig?: MatDialogConfig) {\n    return this.dialog.open<T, D, R>(comp, {\n      minWidth: 280,\n      ...dialogConfig\n    });\n  }\n\n  private completeActions(actions?: BcButton[] | null) {\n    return actions ? actions.map(action => ({ focus: false, closeOnClick: true, ...action })) : actions;\n  }\n}\n"],"mappings":"AAAA","sourceRoot":""}