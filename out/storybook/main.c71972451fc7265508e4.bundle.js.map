{"version":3,"file":"main.c71972451fc7265508e4.bundle.js","sources":["webpack:///./projects/components/light/light.service.ts"],"sourcesContent":["import { Injectable, OnDestroy, ComponentFactoryResolver, Injector, ApplicationRef, TemplateRef } from '@angular/core';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { LightComponent, BcLightShape } from './light.component';\nimport { LightRef } from './light-ref';\n\n@Injectable()\nexport class LightService implements OnDestroy {\n  private currentLightRef!: LightRef | null;\n  private destory = new Subject<void>();\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n    private appRef: ApplicationRef\n  ) {}\n\n  ngOnDestroy() {\n    this.destory.next();\n    this.destory.complete();\n  }\n\n  open(focusElement: HTMLElement, config?: BcLightConfig) {\n    const domPortal = this.createDomPortal();\n\n    const lightComponentRef = domPortal.attach(new ComponentPortal(LightComponent));\n\n    lightComponentRef.instance.focusElement = focusElement;\n    lightComponentRef.instance.setProps(config);\n\n    const lightRef = new LightRef(lightComponentRef.instance, domPortal);\n\n    lightRef\n      .afterClosed()\n      .pipe(takeUntil(this.destory))\n      .subscribe(() => {\n        if (this.currentLightRef === lightRef) {\n          this.currentLightRef = null;\n        }\n      });\n\n    if (this.currentLightRef) {\n      this.currentLightRef\n        .afterClosed()\n        .pipe(takeUntil(this.destory))\n        .subscribe(() => {\n          lightRef.componentInstance.enter();\n        });\n      this.currentLightRef.close();\n    } else {\n      lightRef.componentInstance.enter();\n    }\n\n    this.currentLightRef = lightRef;\n\n    return this.currentLightRef;\n  }\n\n  close() {\n    if (this.currentLightRef) {\n      this.currentLightRef.close();\n    }\n  }\n\n  private createDomPortal() {\n    const container = document.createElement('div');\n\n    container.classList.add('bc-light-container');\n    document.body.appendChild(container);\n\n    return new DomPortalOutlet(container, this.componentFactoryResolver, this.appRef, this.injector);\n  }\n}\n\nexport interface BcLightTarget {\n  width: number;\n  height: number;\n  top: number;\n  left: number;\n}\n\nexport interface BcLightConfig {\n  padding?: number;\n  indicatorShape?: BcLightShape;\n  noContextAutoAdjust?: boolean;\n  contentText?: string;\n  dismissText?: string;\n  customTemplate?: TemplateRef<any>;\n}\n"],"mappings":"AAAA","sourceRoot":""}